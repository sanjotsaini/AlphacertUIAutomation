// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlphacertTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Truck")]
    public partial class TruckFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Truck.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Truck", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get The Quote of Truck Insurance")]
        [NUnit.Framework.CategoryAttribute("Positive")]
        [NUnit.Framework.CategoryAttribute("Truck")]
        public virtual void GetTheQuoteOfTruckInsurance()
        {
            string[] tagsOfScenario = new string[] {
                    "Positive",
                    "Truck"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get The Quote of Truck Insurance", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I visit to Tricentie website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("I navigate to truck isurance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Values"});
                table5.AddRow(new string[] {
                            "Make",
                            "BMW"});
                table5.AddRow(new string[] {
                            "EnginePerformance",
                            "236"});
                table5.AddRow(new string[] {
                            "DateOfManufacture",
                            "02/04/2007"});
                table5.AddRow(new string[] {
                            "NumberOfSeats",
                            "5"});
                table5.AddRow(new string[] {
                            "FuelType",
                            "Petrol"});
                table5.AddRow(new string[] {
                            "Payload",
                            "500"});
                table5.AddRow(new string[] {
                            "TotalWeight",
                            "500"});
                table5.AddRow(new string[] {
                            "ListPrice",
                            "50000"});
                table5.AddRow(new string[] {
                            "LicencePlateNumber",
                            "LSU335"});
                table5.AddRow(new string[] {
                            "AnualMilage",
                            "300"});
#line 8
 testRunner.When("I fill the vehicle data details truck", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Values"});
                table6.AddRow(new string[] {
                            "FirstName",
                            "Sanjot"});
                table6.AddRow(new string[] {
                            "LastName",
                            "Saini"});
                table6.AddRow(new string[] {
                            "DOB",
                            "12/26/1993"});
                table6.AddRow(new string[] {
                            "Gender",
                            "Male"});
                table6.AddRow(new string[] {
                            "StreetAddress",
                            "39,Magnolia drive"});
                table6.AddRow(new string[] {
                            "Country",
                            "New Zealand"});
                table6.AddRow(new string[] {
                            "ZipCode",
                            "4310"});
                table6.AddRow(new string[] {
                            "City",
                            "New Plymouth"});
                table6.AddRow(new string[] {
                            "Occupation",
                            "Farmer"});
                table6.AddRow(new string[] {
                            "Hobbies",
                            "SkyDiving"});
                table6.AddRow(new string[] {
                            "Website",
                            "https://facebook.com"});
#line 20
 testRunner.When("I fill the insurance data details", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Values"});
                table7.AddRow(new string[] {
                            "StartDate",
                            "05/03/2021"});
                table7.AddRow(new string[] {
                            "InsurancSum",
                            "7.000.000,00"});
                table7.AddRow(new string[] {
                            "MeritRating",
                            "Bonus 7"});
                table7.AddRow(new string[] {
                            "DamageInsurance",
                            "Full Coverage"});
                table7.AddRow(new string[] {
                            "OptionalProducts",
                            ""});
                table7.AddRow(new string[] {
                            "CourtesyCar",
                            "Yes"});
#line 33
 testRunner.When("I fill the enter product data details for truck", ((string)(null)), table7, "When ");
#line hidden
#line 41
 testRunner.When("I select the price option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Values"});
                table8.AddRow(new string[] {
                            "Email",
                            "sainisanjot26@gmail.com"});
                table8.AddRow(new string[] {
                            "Username",
                            "sainisa"});
                table8.AddRow(new string[] {
                            "Password",
                            "Password@123"});
                table8.AddRow(new string[] {
                            "ConfirmPassword",
                            "Password@123"});
                table8.AddRow(new string[] {
                            "Comment",
                            "Test"});
#line 42
 testRunner.When("I fill the send qoute details", ((string)(null)), table8, "When ");
#line hidden
#line 49
 testRunner.When("I click the send button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("I verify the quote is sent succesfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
